{"version":3,"sources":["hooks/useRefferal.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CardValue2.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/Refferals.tsx","views/Home/components/RefferalLink.tsx","views/Home/Home.tsx"],"names":["useRefferal","account","useWallet","fastRefresh","useRefresh","useState","refferdBy","totalRfferal","totalReferralCommissions","result","setResults","useEffect","a","calls","address","getRefferalAddress","name","params","multicall","refferalAbi","rawResults","console","log","data","BigNumber","_hex","toNumber","fetchBalances","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","map","farm","getMasterChefAddress","pid","masterChefABI","results","index","balance","CardValue","value","decimals","prefix","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","style","color","backgroundRepeat","lineHeight","fontWeight","CakeHarvestBalance","earningsSum","TranslateString","useI18n","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","mb","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","CardValue2","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","rbhPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","height","chrome","width","RefferalCard","size","RefferalLink","text","window","location","href","onCopy","slice","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/14.1843c6b9.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getRefferalAddress } from 'utils/addressHelpers'\nimport refferalAbi from 'config/abi/refferal.json'\n\nimport useRefresh from './useRefresh'\n\nconst useRefferal = () => {\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n  const [result, setResults] = useState({ refferdBy: '', totalRfferal: 0, totalReferralCommissions: 0 })\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = [\n        {\n          address: getRefferalAddress(),\n          name: 'getReferrer',\n          params: [account],\n        },\n        {\n          address: getRefferalAddress(),\n          name: 'referralsCount',\n          params: [account],\n        },\n        {\n          address: getRefferalAddress(),\n          name: 'totalReferralCommissions',\n          params: [account],\n        },\n      ]\n\n      const rawResults = await multicall(refferalAbi, calls)\n      console.log(rawResults, 'rawresults')\n      const data = result\n      if (rawResults[0][0] === '0x0000000000000000000000000000000000000000') {\n        data.refferdBy = '-'\n      } else {\n        data.refferdBy = rawResults[0][0]\n      }\n\n      data.totalRfferal = new BigNumber(rawResults[1][0]._hex).toNumber()\n      data.totalReferralCommissions = new BigNumber(rawResults[2][0]._hex).toNumber()/1e18\n      //  {\n      //     refferdBy: rawResults[0][0],\n      //     totalRfferal: new BigNumber(rawResults[1][0]._hex),\n      //     totalReferralCommissions: new BigNumber(rawResults[2][0]._hex)\n      // }\n      setResults(data)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh, result])\n\n  return result\n}\n\nexport default useRefferal\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRbh',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <div>\n      <Text bold fontSize=\"25px\" style={{ color: '#FABE41', backgroundRepeat: 'no-repeat', lineHeight: '1',fontWeight:700, fontSize:\"25px\" }}>\n        {prefix}\n        {countUp}\n      </Text>\n    </div>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return <Text color=\"text\" style={{fontWeight:\"bold\", fontSize:\"24px\"}}>{TranslateString(298, 'Locked')}</Text>\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return <Text color=\"text\" style={{fontWeight:\"bold\", fontSize:\"24px\"}}>{TranslateString(298, 'Locked')}</Text>\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingRbh',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useRefferal from 'hooks/useRefferal'\n\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2.png');\n  background-repeat: no-repeat;\n  background-position: center right;\n  min-height: 376px;\n  background-size: 150px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  padding: 10px;\n  font-size: 22px;\n  font-weight: bold;\n  background-repeat: no-repeat;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const refferals = useRefferal()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        {/* <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} /> */}\n        <Block>\n          <Label>{TranslateString(544, 'ENTER to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Text>~${(eggPrice * earningsSum).toFixed(2)}</Text>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'ENTER in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Text>~${(eggPrice * cakeBalance).toFixed(2)}</Text>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue2: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize=\"25px\" color=\"textSubtle\" style={{fontWeight:\"bold\", fontSize:\"25px\"}}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue2\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue2 from './CardValue2'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 20px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let rbhPerBlock = 0\n  if (farms && farms[0] && farms[0].rbhPerBlock) {\n    rbhPerBlock = new BigNumber(farms[0].rbhPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue2 fontSize=\"20px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue2 fontSize=\"20px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue2 fontSize=\"20px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue2 fontSize=\"20px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"20px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"20px\">\n            {rbhPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\nimport CardValue2 from './CardValue2'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  background-image: url('/images/totalvalue.png');\n  background-repeat: no-repeat;\n  background-position: 95% center;\n  background-size: 120px;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading fontSize=\"24px\" style={{ fontSize: '24px' }} mb=\"24px\">\n          TOTAL VALUE LOCKED \n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue2 fontSize=\"4em\" value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text style={{ fontSize: '1.2em' }} color=\"text\">\n            ACROSS ALL FARMS AND POOLS\n          </Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'RobinhoodSwap',\n          }}\n          options={{\n            height: '280',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport useRefferal from 'hooks/useRefferal'\nimport CardValue from './CardValue'\nimport CardValue2 from './CardValue2'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  background-repeat: no-repeat;\n  background-position: 95% center;\n  background-size: 120px;\n  width: 100%;\n`\n\nconst RefferalCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalRfferal = useRefferal()\n  // const tvl = totalValue.toFixed(2);\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        {console.log(totalRfferal, 'totalValue')}\n        <Heading size=\"lg\" style={{ fontSize: '2em' }} mb=\"24px\">\n          Referral Details\n        </Heading>\n        {totalRfferal && (\n          <>\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\n              Total Referral Earnings\n            </Text>\n            <CardValue2 fontSize=\"4em\" value={totalRfferal.totalReferralCommissions} />\n          </>\n        )}\n        {totalRfferal && (\n          <>\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\n              Total Referral\n            </Text>\n            <CardValue2 fontSize=\"2em\" value={totalRfferal.totalRfferal} decimals={0} />\n          </>\n        )}\n        {totalRfferal && (\n          <>\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\n              Referred By\n            </Text>\n\n            <Text color=\"textSubtle\">{totalRfferal.refferdBy} </Text>\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default RefferalCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text, Button } from '@pancakeswap-libs/uikit'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  background-repeat: no-repeat;\n  background-position: 95% center;\n  background-size: 120px;\n`\n\nconst RefferalLink = () => {\n  const { account } = useWallet()\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\n          Referral Link\n        </Heading>\n\n        <Text style={{ fontSize: '1.2em' }}>Click on Button to copy your referral link</Text>\n        <br />\n        <CopyToClipboard text={`${window.location.href}?ref=${account}`} onCopy={() => console.log('Copied')}>\n          <Button fullWidth>{`${window.location.href}?ref=${account}`.slice(0, 50)}</Button>\n        </CopyToClipboard>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default RefferalLink\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport RefferalCard from './components/Refferals'\nimport RefferalLink from './components/RefferalLink'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/logo.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  height: 250px;\n  margin-bottom: 32px;\n  text-align: center;\n  background-size: 100%;\n  // background:#FFFFFFC5;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-position: center, right;\n    background-image: url('/images/logo.png');\n    background-repeat: no-repeat;\n    width: 60%;\n    height: 230px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <div>\n      <Page>\n        <Hero>\n          {/* <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n            {TranslateString(576, 'Goose Finance')}\n          </Heading> */}\n          {/* <Text>{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text> */}\n        </Hero>\n        {/* <div style={{ textAlign: \"center\" }}>\n          <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"black\">\n            Being Audited by NtHack\n          </Heading>\n        </div> */}\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <TwitterCard />\n            <CakeStats />\n            <TotalValueLockedCard />\n            <RefferalCard />\n            <RefferalLink />\n          </Cards>\n        </div>\n      </Page>\n    </div>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}